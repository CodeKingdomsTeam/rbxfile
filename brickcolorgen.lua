-- This file generates the content of brickcolor.go

local MAX  = 1032 -- Maximum BrickColor number to check
local PREC = 18   -- Color3 float precision

local maxlen = #tostring(MAX)
local function align(bc)
	return string.rep(' ', maxlen - #tostring(bc.Number)+1)
end

local data = ''
local function write(f, ...)
	data = data .. string.format(f, ...)
end

write('package rbxfile\n')
write('\n')
write('// This file was automatically generated by brickcolorgen.lua\n')
write('\n')

write('var brickColorDefault = ValueBrickColor(%d)\n', BrickColor.new(-1).Number)

write('\n')

local colors = {}
for i = 0, MAX do
	local bc = BrickColor.new(i)
	if bc.Number == i then
		colors[#colors+1] = bc
	end
end

write('var brickColorNames = map[ValueBrickColor]string{\n')
for i = 1, #colors do
	local bc = colors[i]
	write('\t%d:' .. align(bc) .. '%q,\n', bc.Number, bc.Name)
end
write('}\n')

write('\n')

write('var brickColorColors = map[ValueBrickColor]ValueColor3{\n')
local format = '\t%%d:%sValueColor3{%%.%df, %%.%df, %%.%df}, // %%3g, %%3g, %%3g\n'
for i = 1, #colors do
	local bc = colors[i]
	local c = bc.Color
	local f = string.format(format, align(bc), PREC, PREC, PREC)
	write(f, bc.Number, c.r, c.g, c.b, c.r*255, c.g*255, c.b*255)
end
write('}\n')

write('\n')

write('var brickColorPalette = [...]ValueBrickColor{\n')
local i = 0
while true do
	local s, bc = pcall(BrickColor.palette, i)
	if not s then
		break
	end

	if i%8 == 0 then
		write('\t')
	end

	i = i + 1

	if i%8 == 0 then
		write('%d,\n', bc.Number)
	else
		write('%d, ', bc.Number)
	end
end
write('}')

print(data)
